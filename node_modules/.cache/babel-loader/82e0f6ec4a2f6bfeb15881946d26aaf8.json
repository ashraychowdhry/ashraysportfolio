{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Attractor = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nclass Attractor {\n  constructor(container) {\n    this.container = container;\n  }\n\n  isEnabled() {\n    const container = this.container;\n    const options = container.options;\n    const mouse = container.interactivity.mouse;\n    const events = options.interactivity.events;\n\n    if (!(events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode;\n    const clickMode = events.onClick.mode;\n    return Utils_1.Utils.isInArray(\"attract\", hoverMode) || Utils_1.Utils.isInArray(\"attract\", clickMode);\n  }\n\n  reset() {}\n\n  interact() {\n    const container = this.container;\n    const options = container.options;\n    const mouseMoveStatus = container.interactivity.status === Utils_1.Constants.mouseMoveEvent;\n    const events = options.interactivity.events;\n    const hoverEnabled = events.onHover.enable;\n    const hoverMode = events.onHover.mode;\n    const clickEnabled = events.onClick.enable;\n    const clickMode = events.onClick.mode;\n\n    if (mouseMoveStatus && hoverEnabled && Utils_1.Utils.isInArray(\"attract\", hoverMode)) {\n      this.hoverAttract();\n    } else if (clickEnabled && Utils_1.Utils.isInArray(\"attract\", clickMode)) {\n      this.clickAttract();\n    }\n  }\n\n  hoverAttract() {\n    const container = this.container;\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const attractRadius = container.retina.attractModeDistance;\n    this.processAttract(mousePos, attractRadius, new Utils_1.Circle(mousePos.x, mousePos.y, attractRadius));\n  }\n\n  processAttract(position, attractRadius, area) {\n    const container = this.container;\n    const query = container.particles.quadTree.query(area);\n\n    for (const particle of query) {\n      const {\n        dx,\n        dy,\n        distance\n      } = Utils_1.NumberUtils.getDistances(particle.position, position);\n      const normVec = {\n        x: dx / distance,\n        y: dy / distance\n      };\n      const velocity = container.options.interactivity.modes.attract.speed;\n      const attractFactor = Utils_1.NumberUtils.clamp((1 - Math.pow(distance / attractRadius, 2)) * velocity, 0, 50);\n      particle.position.x = particle.position.x - normVec.x * attractFactor;\n      particle.position.y = particle.position.y - normVec.y * attractFactor;\n    }\n  }\n\n  clickAttract() {\n    const container = this.container;\n\n    if (!container.attract.finish) {\n      if (!container.attract.count) {\n        container.attract.count = 0;\n      }\n\n      container.attract.count++;\n\n      if (container.attract.count === container.particles.count) {\n        container.attract.finish = true;\n      }\n    }\n\n    if (container.attract.clicking) {\n      const mousePos = container.interactivity.mouse.clickPosition;\n\n      if (!mousePos) {\n        return;\n      }\n\n      const attractRadius = container.retina.attractModeDistance;\n      this.processAttract(mousePos, attractRadius, new Utils_1.Circle(mousePos.x, mousePos.y, attractRadius));\n    } else if (container.attract.clicking === false) {\n      container.attract.particles = [];\n    }\n\n    return;\n  }\n\n}\n\nexports.Attractor = Attractor;","map":{"version":3,"sources":["/Users/ashraychowdhry/Documents/GitHub/ashraysportfolio/node_modules/tsparticles/dist/Interactions/External/Attractor.js"],"names":["Object","defineProperty","exports","value","Attractor","Utils_1","require","constructor","container","isEnabled","options","mouse","interactivity","events","onHover","enable","position","onClick","clickPosition","hoverMode","mode","clickMode","Utils","isInArray","reset","interact","mouseMoveStatus","status","Constants","mouseMoveEvent","hoverEnabled","clickEnabled","hoverAttract","clickAttract","mousePos","attractRadius","retina","attractModeDistance","processAttract","Circle","x","y","area","query","particles","quadTree","particle","dx","dy","distance","NumberUtils","getDistances","normVec","velocity","modes","attract","speed","attractFactor","clamp","Math","pow","finish","count","clicking"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMF,SAAN,CAAgB;AACZG,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACH;;AACDC,EAAAA,SAAS,GAAG;AACR,UAAMD,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAME,OAAO,GAAGF,SAAS,CAACE,OAA1B;AACA,UAAMC,KAAK,GAAGH,SAAS,CAACI,aAAV,CAAwBD,KAAtC;AACA,UAAME,MAAM,GAAGH,OAAO,CAACE,aAAR,CAAsBC,MAArC;;AACA,QAAI,EAAGA,MAAM,CAACC,OAAP,CAAeC,MAAf,IAAyBJ,KAAK,CAACK,QAAhC,IAA8CH,MAAM,CAACI,OAAP,CAAeF,MAAf,IAAyBJ,KAAK,CAACO,aAA/E,CAAJ,EAAoG;AAChG,aAAO,KAAP;AACH;;AACD,UAAMC,SAAS,GAAGN,MAAM,CAACC,OAAP,CAAeM,IAAjC;AACA,UAAMC,SAAS,GAAGR,MAAM,CAACI,OAAP,CAAeG,IAAjC;AACA,WAAOf,OAAO,CAACiB,KAAR,CAAcC,SAAd,CAAwB,SAAxB,EAAmCJ,SAAnC,KAAiDd,OAAO,CAACiB,KAAR,CAAcC,SAAd,CAAwB,SAAxB,EAAmCF,SAAnC,CAAxD;AACH;;AACDG,EAAAA,KAAK,GAAG,CACP;;AACDC,EAAAA,QAAQ,GAAG;AACP,UAAMjB,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAME,OAAO,GAAGF,SAAS,CAACE,OAA1B;AACA,UAAMgB,eAAe,GAAGlB,SAAS,CAACI,aAAV,CAAwBe,MAAxB,KAAmCtB,OAAO,CAACuB,SAAR,CAAkBC,cAA7E;AACA,UAAMhB,MAAM,GAAGH,OAAO,CAACE,aAAR,CAAsBC,MAArC;AACA,UAAMiB,YAAY,GAAGjB,MAAM,CAACC,OAAP,CAAeC,MAApC;AACA,UAAMI,SAAS,GAAGN,MAAM,CAACC,OAAP,CAAeM,IAAjC;AACA,UAAMW,YAAY,GAAGlB,MAAM,CAACI,OAAP,CAAeF,MAApC;AACA,UAAMM,SAAS,GAAGR,MAAM,CAACI,OAAP,CAAeG,IAAjC;;AACA,QAAIM,eAAe,IAAII,YAAnB,IAAmCzB,OAAO,CAACiB,KAAR,CAAcC,SAAd,CAAwB,SAAxB,EAAmCJ,SAAnC,CAAvC,EAAsF;AAClF,WAAKa,YAAL;AACH,KAFD,MAGK,IAAID,YAAY,IAAI1B,OAAO,CAACiB,KAAR,CAAcC,SAAd,CAAwB,SAAxB,EAAmCF,SAAnC,CAApB,EAAmE;AACpE,WAAKY,YAAL;AACH;AACJ;;AACDD,EAAAA,YAAY,GAAG;AACX,UAAMxB,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAM0B,QAAQ,GAAG1B,SAAS,CAACI,aAAV,CAAwBD,KAAxB,CAA8BK,QAA/C;;AACA,QAAI,CAACkB,QAAL,EAAe;AACX;AACH;;AACD,UAAMC,aAAa,GAAG3B,SAAS,CAAC4B,MAAV,CAAiBC,mBAAvC;AACA,SAAKC,cAAL,CAAoBJ,QAApB,EAA8BC,aAA9B,EAA6C,IAAI9B,OAAO,CAACkC,MAAZ,CAAmBL,QAAQ,CAACM,CAA5B,EAA+BN,QAAQ,CAACO,CAAxC,EAA2CN,aAA3C,CAA7C;AACH;;AACDG,EAAAA,cAAc,CAACtB,QAAD,EAAWmB,aAAX,EAA0BO,IAA1B,EAAgC;AAC1C,UAAMlC,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMmC,KAAK,GAAGnC,SAAS,CAACoC,SAAV,CAAoBC,QAApB,CAA6BF,KAA7B,CAAmCD,IAAnC,CAAd;;AACA,SAAK,MAAMI,QAAX,IAAuBH,KAAvB,EAA8B;AAC1B,YAAM;AAAEI,QAAAA,EAAF;AAAMC,QAAAA,EAAN;AAAUC,QAAAA;AAAV,UAAuB5C,OAAO,CAAC6C,WAAR,CAAoBC,YAApB,CAAiCL,QAAQ,CAAC9B,QAA1C,EAAoDA,QAApD,CAA7B;AACA,YAAMoC,OAAO,GAAG;AACZZ,QAAAA,CAAC,EAAEO,EAAE,GAAGE,QADI;AAEZR,QAAAA,CAAC,EAAEO,EAAE,GAAGC;AAFI,OAAhB;AAIA,YAAMI,QAAQ,GAAG7C,SAAS,CAACE,OAAV,CAAkBE,aAAlB,CAAgC0C,KAAhC,CAAsCC,OAAtC,CAA8CC,KAA/D;AACA,YAAMC,aAAa,GAAGpD,OAAO,CAAC6C,WAAR,CAAoBQ,KAApB,CAA0B,CAAC,IAAIC,IAAI,CAACC,GAAL,CAASX,QAAQ,GAAGd,aAApB,EAAmC,CAAnC,CAAL,IAA8CkB,QAAxE,EAAkF,CAAlF,EAAqF,EAArF,CAAtB;AACAP,MAAAA,QAAQ,CAAC9B,QAAT,CAAkBwB,CAAlB,GAAsBM,QAAQ,CAAC9B,QAAT,CAAkBwB,CAAlB,GAAsBY,OAAO,CAACZ,CAAR,GAAYiB,aAAxD;AACAX,MAAAA,QAAQ,CAAC9B,QAAT,CAAkByB,CAAlB,GAAsBK,QAAQ,CAAC9B,QAAT,CAAkByB,CAAlB,GAAsBW,OAAO,CAACX,CAAR,GAAYgB,aAAxD;AACH;AACJ;;AACDxB,EAAAA,YAAY,GAAG;AACX,UAAMzB,SAAS,GAAG,KAAKA,SAAvB;;AACA,QAAI,CAACA,SAAS,CAAC+C,OAAV,CAAkBM,MAAvB,EAA+B;AAC3B,UAAI,CAACrD,SAAS,CAAC+C,OAAV,CAAkBO,KAAvB,EAA8B;AAC1BtD,QAAAA,SAAS,CAAC+C,OAAV,CAAkBO,KAAlB,GAA0B,CAA1B;AACH;;AACDtD,MAAAA,SAAS,CAAC+C,OAAV,CAAkBO,KAAlB;;AACA,UAAItD,SAAS,CAAC+C,OAAV,CAAkBO,KAAlB,KAA4BtD,SAAS,CAACoC,SAAV,CAAoBkB,KAApD,EAA2D;AACvDtD,QAAAA,SAAS,CAAC+C,OAAV,CAAkBM,MAAlB,GAA2B,IAA3B;AACH;AACJ;;AACD,QAAIrD,SAAS,CAAC+C,OAAV,CAAkBQ,QAAtB,EAAgC;AAC5B,YAAM7B,QAAQ,GAAG1B,SAAS,CAACI,aAAV,CAAwBD,KAAxB,CAA8BO,aAA/C;;AACA,UAAI,CAACgB,QAAL,EAAe;AACX;AACH;;AACD,YAAMC,aAAa,GAAG3B,SAAS,CAAC4B,MAAV,CAAiBC,mBAAvC;AACA,WAAKC,cAAL,CAAoBJ,QAApB,EAA8BC,aAA9B,EAA6C,IAAI9B,OAAO,CAACkC,MAAZ,CAAmBL,QAAQ,CAACM,CAA5B,EAA+BN,QAAQ,CAACO,CAAxC,EAA2CN,aAA3C,CAA7C;AACH,KAPD,MAQK,IAAI3B,SAAS,CAAC+C,OAAV,CAAkBQ,QAAlB,KAA+B,KAAnC,EAA0C;AAC3CvD,MAAAA,SAAS,CAAC+C,OAAV,CAAkBX,SAAlB,GAA8B,EAA9B;AACH;;AACD;AACH;;AAjFW;;AAmFhB1C,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Attractor = void 0;\nconst Utils_1 = require(\"../../Utils\");\nclass Attractor {\n    constructor(container) {\n        this.container = container;\n    }\n    isEnabled() {\n        const container = this.container;\n        const options = container.options;\n        const mouse = container.interactivity.mouse;\n        const events = options.interactivity.events;\n        if (!((events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        const clickMode = events.onClick.mode;\n        return Utils_1.Utils.isInArray(\"attract\", hoverMode) || Utils_1.Utils.isInArray(\"attract\", clickMode);\n    }\n    reset() {\n    }\n    interact() {\n        const container = this.container;\n        const options = container.options;\n        const mouseMoveStatus = container.interactivity.status === Utils_1.Constants.mouseMoveEvent;\n        const events = options.interactivity.events;\n        const hoverEnabled = events.onHover.enable;\n        const hoverMode = events.onHover.mode;\n        const clickEnabled = events.onClick.enable;\n        const clickMode = events.onClick.mode;\n        if (mouseMoveStatus && hoverEnabled && Utils_1.Utils.isInArray(\"attract\", hoverMode)) {\n            this.hoverAttract();\n        }\n        else if (clickEnabled && Utils_1.Utils.isInArray(\"attract\", clickMode)) {\n            this.clickAttract();\n        }\n    }\n    hoverAttract() {\n        const container = this.container;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const attractRadius = container.retina.attractModeDistance;\n        this.processAttract(mousePos, attractRadius, new Utils_1.Circle(mousePos.x, mousePos.y, attractRadius));\n    }\n    processAttract(position, attractRadius, area) {\n        const container = this.container;\n        const query = container.particles.quadTree.query(area);\n        for (const particle of query) {\n            const { dx, dy, distance } = Utils_1.NumberUtils.getDistances(particle.position, position);\n            const normVec = {\n                x: dx / distance,\n                y: dy / distance,\n            };\n            const velocity = container.options.interactivity.modes.attract.speed;\n            const attractFactor = Utils_1.NumberUtils.clamp((1 - Math.pow(distance / attractRadius, 2)) * velocity, 0, 50);\n            particle.position.x = particle.position.x - normVec.x * attractFactor;\n            particle.position.y = particle.position.y - normVec.y * attractFactor;\n        }\n    }\n    clickAttract() {\n        const container = this.container;\n        if (!container.attract.finish) {\n            if (!container.attract.count) {\n                container.attract.count = 0;\n            }\n            container.attract.count++;\n            if (container.attract.count === container.particles.count) {\n                container.attract.finish = true;\n            }\n        }\n        if (container.attract.clicking) {\n            const mousePos = container.interactivity.mouse.clickPosition;\n            if (!mousePos) {\n                return;\n            }\n            const attractRadius = container.retina.attractModeDistance;\n            this.processAttract(mousePos, attractRadius, new Utils_1.Circle(mousePos.x, mousePos.y, attractRadius));\n        }\n        else if (container.attract.clicking === false) {\n            container.attract.particles = [];\n        }\n        return;\n    }\n}\nexports.Attractor = Attractor;\n"]},"metadata":{},"sourceType":"script"}