{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Updater = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nfunction bounceHorizontal(data) {\n  if (data.outMode === \"bounce\" || data.outMode === \"bounce-horizontal\" || data.outMode === \"bounceHorizontal\") {\n    const velocity = data.particle.velocity.horizontal;\n    let bounced = false;\n\n    if (data.direction === \"right\" && data.bounds.right >= data.canvasSize.width && velocity > 0 || data.direction === \"left\" && data.bounds.left <= 0 && velocity < 0) {\n      const newVelocity = Utils_1.NumberUtils.getValue(data.particle.particlesOptions.bounce.horizontal);\n      data.particle.velocity.horizontal *= -newVelocity;\n      bounced = true;\n    }\n\n    if (bounced) {\n      const minPos = data.offset.x + data.size;\n\n      if (data.bounds.right >= data.canvasSize.width) {\n        data.particle.position.x = data.canvasSize.width - minPos;\n      } else if (data.bounds.left <= 0) {\n        data.particle.position.x = minPos;\n      }\n    }\n  }\n}\n\nfunction bounceVertical(data) {\n  if (data.outMode === \"bounce\" || data.outMode === \"bounce-vertical\" || data.outMode === \"bounceVertical\") {\n    const velocity = data.particle.velocity.vertical;\n    let bounced = false;\n\n    if (data.direction === \"bottom\" && data.bounds.bottom >= data.canvasSize.height && velocity > 0 || data.direction === \"top\" && data.bounds.top <= 0 && velocity < 0) {\n      const newVelocity = Utils_1.NumberUtils.getValue(data.particle.particlesOptions.bounce.vertical);\n      data.particle.velocity.vertical *= -newVelocity;\n      bounced = true;\n    }\n\n    if (bounced) {\n      const minPos = data.offset.y + data.size;\n\n      if (data.bounds.bottom >= data.canvasSize.height) {\n        data.particle.position.y = data.canvasSize.height - minPos;\n      } else if (data.bounds.top <= 0) {\n        data.particle.position.y = minPos;\n      }\n    }\n  }\n}\n\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n  switch (destroy) {\n    case \"max\":\n      if (value >= maxValue) {\n        particle.destroy();\n      }\n\n      break;\n\n    case \"min\":\n      if (value <= minValue) {\n        particle.destroy();\n      }\n\n      break;\n  }\n}\n\nclass Updater {\n  constructor(container, particle) {\n    this.container = container;\n    this.particle = particle;\n  }\n\n  update(delta) {\n    if (this.particle.destroyed) {\n      return;\n    }\n\n    this.updateLife(delta);\n\n    if (this.particle.destroyed || this.particle.spawning) {\n      return;\n    }\n\n    this.updateOpacity(delta);\n    this.updateSize(delta);\n    this.updateAngle(delta);\n    this.updateColor(delta);\n    this.updateStrokeColor(delta);\n    this.updateOutModes(delta);\n  }\n\n  updateLife(delta) {\n    const particle = this.particle;\n    let justSpawned = false;\n\n    if (particle.spawning) {\n      particle.lifeDelayTime += delta.value;\n\n      if (particle.lifeDelayTime >= particle.lifeDelay) {\n        justSpawned = true;\n        particle.spawning = false;\n        particle.lifeDelayTime = 0;\n        particle.lifeTime = 0;\n      }\n    }\n\n    if (particle.lifeDuration === -1) {\n      return;\n    }\n\n    if (!particle.spawning) {\n      if (justSpawned) {\n        particle.lifeTime = 0;\n      } else {\n        particle.lifeTime += delta.value;\n      }\n\n      if (particle.lifeTime >= particle.lifeDuration) {\n        particle.lifeTime = 0;\n\n        if (particle.livesRemaining > 0) {\n          particle.livesRemaining--;\n        }\n\n        if (particle.livesRemaining === 0) {\n          particle.destroy();\n          return;\n        }\n\n        const canvasSize = this.container.canvas.size;\n        particle.position.x = Utils_1.NumberUtils.randomInRange(0, canvasSize.width);\n        particle.position.y = Utils_1.NumberUtils.randomInRange(0, canvasSize.height);\n        particle.spawning = true;\n        particle.lifeDelayTime = 0;\n        particle.lifeTime = 0;\n        const lifeOptions = particle.particlesOptions.life;\n        particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;\n        particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;\n      }\n    }\n  }\n\n  updateOpacity(delta) {\n    var _a, _b;\n\n    const particle = this.particle;\n    const opacityAnim = particle.particlesOptions.opacity.anim;\n    const minValue = opacityAnim.minimumValue;\n    const maxValue = particle.particlesOptions.opacity.value;\n\n    if (opacityAnim.enable) {\n      switch (particle.opacity.status) {\n        case 0:\n          if (particle.opacity.value >= maxValue) {\n            particle.opacity.status = 1;\n          } else {\n            particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n          }\n\n          break;\n\n        case 1:\n          if (particle.opacity.value <= minValue) {\n            particle.opacity.status = 0;\n          } else {\n            particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n          }\n\n          break;\n      }\n\n      checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n\n      if (!particle.destroyed) {\n        particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);\n      }\n    }\n  }\n\n  updateSize(delta) {\n    var _a, _b;\n\n    const container = this.container;\n    const particle = this.particle;\n    const sizeOpt = particle.particlesOptions.size;\n    const sizeAnim = sizeOpt.animation;\n    const sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n    const maxValue = (_b = particle.sizeValue) !== null && _b !== void 0 ? _b : container.retina.sizeValue;\n    const minValue = sizeAnim.minimumValue * container.retina.pixelRatio;\n\n    if (sizeAnim.enable) {\n      switch (particle.size.status) {\n        case 0:\n          if (particle.size.value >= maxValue) {\n            particle.size.status = 1;\n          } else {\n            particle.size.value += sizeVelocity;\n          }\n\n          break;\n\n        case 1:\n          if (particle.size.value <= minValue) {\n            particle.size.status = 0;\n          } else {\n            particle.size.value -= sizeVelocity;\n          }\n\n      }\n\n      checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n\n      if (!particle.destroyed) {\n        particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);\n      }\n    }\n  }\n\n  updateAngle(delta) {\n    var _a;\n\n    const particle = this.particle;\n    const rotate = particle.particlesOptions.rotate;\n    const rotateAnimation = rotate.animation;\n    const speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n    const max = 2 * Math.PI;\n\n    if (rotate.path) {\n      particle.pathAngle = Math.atan2(particle.velocity.vertical, particle.velocity.horizontal);\n    } else if (rotateAnimation.enable) {\n      switch (particle.rotate.status) {\n        case 0:\n          particle.rotate.value += speed;\n\n          if (particle.rotate.value > max) {\n            particle.rotate.value -= max;\n          }\n\n          break;\n\n        case 1:\n        default:\n          particle.rotate.value -= speed;\n\n          if (particle.rotate.value < 0) {\n            particle.rotate.value += max;\n          }\n\n          break;\n      }\n    }\n  }\n\n  updateColor(delta) {\n    var _a;\n\n    const particle = this.particle;\n\n    if (particle.color.value === undefined) {\n      return;\n    }\n\n    if (particle.particlesOptions.color.animation.enable) {\n      particle.color.value.h += ((_a = particle.color.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n\n      if (particle.color.value.h > 360) {\n        particle.color.value.h -= 360;\n      }\n    }\n  }\n\n  updateStrokeColor(delta) {\n    var _a, _b;\n\n    const particle = this.particle;\n    const color = particle.stroke.color;\n\n    if (typeof color === \"string\" || color === undefined) {\n      return;\n    }\n\n    if (particle.strokeColor.value === undefined) {\n      return;\n    }\n\n    if (color.animation.enable) {\n      particle.strokeColor.value.h += ((_b = (_a = particle.strokeColor.velocity) !== null && _a !== void 0 ? _a : particle.color.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n\n      if (particle.strokeColor.value.h > 360) {\n        particle.strokeColor.value.h -= 360;\n      }\n    }\n  }\n\n  updateOutModes(delta) {\n    var _a, _b, _c, _d;\n\n    const outModes = this.particle.particlesOptions.move.outModes;\n    this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, \"bottom\");\n    this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, \"left\");\n    this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, \"right\");\n    this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, \"top\");\n  }\n\n  updateOutMode(delta, outMode, direction) {\n    const container = this.container;\n    const particle = this.particle;\n\n    switch (outMode) {\n      case \"bounce\":\n      case \"bounce-vertical\":\n      case \"bounce-horizontal\":\n      case \"bounceVertical\":\n      case \"bounceHorizontal\":\n        this.updateBounce(delta, direction, outMode);\n        break;\n\n      case \"destroy\":\n        if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n          container.particles.remove(particle);\n        }\n\n        break;\n\n      case \"out\":\n        if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n          this.fixOutOfCanvasPosition(direction);\n        }\n\n        break;\n\n      case \"none\":\n        this.bounceNone(direction);\n        break;\n    }\n  }\n\n  fixOutOfCanvasPosition(direction) {\n    const container = this.container;\n    const particle = this.particle;\n    const wrap = particle.particlesOptions.move.warp;\n    const canvasSize = container.canvas.size;\n    const newPos = {\n      bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n      left: -particle.getRadius() - particle.offset.x,\n      right: canvasSize.width + particle.getRadius() + particle.offset.x,\n      top: -particle.getRadius() - particle.offset.y\n    };\n    const sizeValue = particle.getRadius();\n    const nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n\n    if (direction === \"right\" && nextBounds.left > canvasSize.width - particle.offset.x) {\n      particle.position.x = newPos.left;\n\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n      }\n    } else if (direction === \"left\" && nextBounds.right < -particle.offset.x) {\n      particle.position.x = newPos.right;\n\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n      }\n    }\n\n    if (direction === \"bottom\" && nextBounds.top > canvasSize.height - particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n      }\n\n      particle.position.y = newPos.top;\n    } else if (direction === \"top\" && nextBounds.bottom < -particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n      }\n\n      particle.position.y = newPos.bottom;\n    }\n  }\n\n  updateBounce(delta, direction, outMode) {\n    const container = this.container;\n    const particle = this.particle;\n    let handled = false;\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleBounce !== undefined) {\n        handled = plugin.particleBounce(particle, delta, direction);\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    if (handled) {\n      return;\n    }\n\n    const pos = particle.getPosition(),\n          offset = particle.offset,\n          size = particle.getRadius(),\n          bounds = Utils_1.Utils.calculateBounds(pos, size),\n          canvasSize = container.canvas.size;\n    bounceHorizontal({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n    bounceVertical({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n  }\n\n  bounceNone(direction) {\n    const particle = this.particle;\n\n    if (particle.particlesOptions.move.distance) {\n      return;\n    }\n\n    const gravityOptions = particle.particlesOptions.move.gravity;\n    const container = this.container;\n\n    if (!gravityOptions.enable) {\n      if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n        container.particles.remove(particle);\n      }\n    } else {\n      const position = particle.position;\n\n      if (gravityOptions.acceleration >= 0 && position.y > container.canvas.size.height && direction === \"bottom\" || gravityOptions.acceleration < 0 && position.y < 0 && direction === \"top\") {\n        container.particles.remove(particle);\n      }\n    }\n  }\n\n}\n\nexports.Updater = Updater;","map":{"version":3,"sources":["/Users/ashraychowdhry/Documents/GitHub/ashraysportfolio/node_modules/tsparticles/dist/Core/Particle/Updater.js"],"names":["Object","defineProperty","exports","value","Updater","Utils_1","require","bounceHorizontal","data","outMode","velocity","particle","horizontal","bounced","direction","bounds","right","canvasSize","width","left","newVelocity","NumberUtils","getValue","particlesOptions","bounce","minPos","offset","x","size","position","bounceVertical","vertical","bottom","height","top","y","checkDestroy","destroy","minValue","maxValue","constructor","container","update","delta","destroyed","updateLife","spawning","updateOpacity","updateSize","updateAngle","updateColor","updateStrokeColor","updateOutModes","justSpawned","lifeDelayTime","lifeDelay","lifeTime","lifeDuration","livesRemaining","canvas","randomInRange","lifeOptions","life","delay","duration","_a","_b","opacityAnim","opacity","anim","minimumValue","enable","status","factor","clamp","sizeOpt","sizeAnim","animation","sizeVelocity","sizeValue","retina","pixelRatio","rotate","rotateAnimation","speed","max","Math","PI","path","pathAngle","atan2","color","undefined","h","stroke","strokeColor","_c","_d","outModes","move","updateOutMode","default","updateBounce","Utils","isPointInside","getRadius","particles","remove","fixOutOfCanvasPosition","bounceNone","wrap","warp","newPos","nextBounds","calculateBounds","random","handled","plugin","plugins","particleBounce","pos","getPosition","distance","gravityOptions","gravity","acceleration"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Updater = void 0;\nconst Utils_1 = require(\"../../Utils\");\nfunction bounceHorizontal(data) {\n    if (data.outMode === \"bounce\" ||\n        data.outMode === \"bounce-horizontal\" ||\n        data.outMode === \"bounceHorizontal\") {\n        const velocity = data.particle.velocity.horizontal;\n        let bounced = false;\n        if ((data.direction === \"right\" && data.bounds.right >= data.canvasSize.width && velocity > 0) ||\n            (data.direction === \"left\" && data.bounds.left <= 0 && velocity < 0)) {\n            const newVelocity = Utils_1.NumberUtils.getValue(data.particle.particlesOptions.bounce.horizontal);\n            data.particle.velocity.horizontal *= -newVelocity;\n            bounced = true;\n        }\n        if (bounced) {\n            const minPos = data.offset.x + data.size;\n            if (data.bounds.right >= data.canvasSize.width) {\n                data.particle.position.x = data.canvasSize.width - minPos;\n            }\n            else if (data.bounds.left <= 0) {\n                data.particle.position.x = minPos;\n            }\n        }\n    }\n}\nfunction bounceVertical(data) {\n    if (data.outMode === \"bounce\" ||\n        data.outMode === \"bounce-vertical\" ||\n        data.outMode === \"bounceVertical\") {\n        const velocity = data.particle.velocity.vertical;\n        let bounced = false;\n        if ((data.direction === \"bottom\" &&\n            data.bounds.bottom >= data.canvasSize.height &&\n            velocity > 0) ||\n            (data.direction === \"top\" && data.bounds.top <= 0 && velocity < 0)) {\n            const newVelocity = Utils_1.NumberUtils.getValue(data.particle.particlesOptions.bounce.vertical);\n            data.particle.velocity.vertical *= -newVelocity;\n            bounced = true;\n        }\n        if (bounced) {\n            const minPos = data.offset.y + data.size;\n            if (data.bounds.bottom >= data.canvasSize.height) {\n                data.particle.position.y = data.canvasSize.height - minPos;\n            }\n            else if (data.bounds.top <= 0) {\n                data.particle.position.y = minPos;\n            }\n        }\n    }\n}\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n    switch (destroy) {\n        case \"max\":\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case \"min\":\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nclass Updater {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    update(delta) {\n        if (this.particle.destroyed) {\n            return;\n        }\n        this.updateLife(delta);\n        if (this.particle.destroyed || this.particle.spawning) {\n            return;\n        }\n        this.updateOpacity(delta);\n        this.updateSize(delta);\n        this.updateAngle(delta);\n        this.updateColor(delta);\n        this.updateStrokeColor(delta);\n        this.updateOutModes(delta);\n    }\n    updateLife(delta) {\n        const particle = this.particle;\n        let justSpawned = false;\n        if (particle.spawning) {\n            particle.lifeDelayTime += delta.value;\n            if (particle.lifeDelayTime >= particle.lifeDelay) {\n                justSpawned = true;\n                particle.spawning = false;\n                particle.lifeDelayTime = 0;\n                particle.lifeTime = 0;\n            }\n        }\n        if (particle.lifeDuration === -1) {\n            return;\n        }\n        if (!particle.spawning) {\n            if (justSpawned) {\n                particle.lifeTime = 0;\n            }\n            else {\n                particle.lifeTime += delta.value;\n            }\n            if (particle.lifeTime >= particle.lifeDuration) {\n                particle.lifeTime = 0;\n                if (particle.livesRemaining > 0) {\n                    particle.livesRemaining--;\n                }\n                if (particle.livesRemaining === 0) {\n                    particle.destroy();\n                    return;\n                }\n                const canvasSize = this.container.canvas.size;\n                particle.position.x = Utils_1.NumberUtils.randomInRange(0, canvasSize.width);\n                particle.position.y = Utils_1.NumberUtils.randomInRange(0, canvasSize.height);\n                particle.spawning = true;\n                particle.lifeDelayTime = 0;\n                particle.lifeTime = 0;\n                const lifeOptions = particle.particlesOptions.life;\n                particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;\n                particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;\n            }\n        }\n    }\n    updateOpacity(delta) {\n        var _a, _b;\n        const particle = this.particle;\n        const opacityAnim = particle.particlesOptions.opacity.anim;\n        const minValue = opacityAnim.minimumValue;\n        const maxValue = particle.particlesOptions.opacity.value;\n        if (opacityAnim.enable) {\n            switch (particle.opacity.status) {\n                case 0:\n                    if (particle.opacity.value >= maxValue) {\n                        particle.opacity.status = 1;\n                    }\n                    else {\n                        particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n                    }\n                    break;\n                case 1:\n                    if (particle.opacity.value <= minValue) {\n                        particle.opacity.status = 0;\n                    }\n                    else {\n                        particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n                    }\n                    break;\n            }\n            checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n            if (!particle.destroyed) {\n                particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);\n            }\n        }\n    }\n    updateSize(delta) {\n        var _a, _b;\n        const container = this.container;\n        const particle = this.particle;\n        const sizeOpt = particle.particlesOptions.size;\n        const sizeAnim = sizeOpt.animation;\n        const sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const maxValue = (_b = particle.sizeValue) !== null && _b !== void 0 ? _b : container.retina.sizeValue;\n        const minValue = sizeAnim.minimumValue * container.retina.pixelRatio;\n        if (sizeAnim.enable) {\n            switch (particle.size.status) {\n                case 0:\n                    if (particle.size.value >= maxValue) {\n                        particle.size.status = 1;\n                    }\n                    else {\n                        particle.size.value += sizeVelocity;\n                    }\n                    break;\n                case 1:\n                    if (particle.size.value <= minValue) {\n                        particle.size.status = 0;\n                    }\n                    else {\n                        particle.size.value -= sizeVelocity;\n                    }\n            }\n            checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n            if (!particle.destroyed) {\n                particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);\n            }\n        }\n    }\n    updateAngle(delta) {\n        var _a;\n        const particle = this.particle;\n        const rotate = particle.particlesOptions.rotate;\n        const rotateAnimation = rotate.animation;\n        const speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const max = 2 * Math.PI;\n        if (rotate.path) {\n            particle.pathAngle = Math.atan2(particle.velocity.vertical, particle.velocity.horizontal);\n        }\n        else if (rotateAnimation.enable) {\n            switch (particle.rotate.status) {\n                case 0:\n                    particle.rotate.value += speed;\n                    if (particle.rotate.value > max) {\n                        particle.rotate.value -= max;\n                    }\n                    break;\n                case 1:\n                default:\n                    particle.rotate.value -= speed;\n                    if (particle.rotate.value < 0) {\n                        particle.rotate.value += max;\n                    }\n                    break;\n            }\n        }\n    }\n    updateColor(delta) {\n        var _a;\n        const particle = this.particle;\n        if (particle.color.value === undefined) {\n            return;\n        }\n        if (particle.particlesOptions.color.animation.enable) {\n            particle.color.value.h += ((_a = particle.color.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n            if (particle.color.value.h > 360) {\n                particle.color.value.h -= 360;\n            }\n        }\n    }\n    updateStrokeColor(delta) {\n        var _a, _b;\n        const particle = this.particle;\n        const color = particle.stroke.color;\n        if (typeof color === \"string\" || color === undefined) {\n            return;\n        }\n        if (particle.strokeColor.value === undefined) {\n            return;\n        }\n        if (color.animation.enable) {\n            particle.strokeColor.value.h +=\n                ((_b = (_a = particle.strokeColor.velocity) !== null && _a !== void 0 ? _a : particle.color.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n            if (particle.strokeColor.value.h > 360) {\n                particle.strokeColor.value.h -= 360;\n            }\n        }\n    }\n    updateOutModes(delta) {\n        var _a, _b, _c, _d;\n        const outModes = this.particle.particlesOptions.move.outModes;\n        this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, \"bottom\");\n        this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, \"left\");\n        this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, \"right\");\n        this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, \"top\");\n    }\n    updateOutMode(delta, outMode, direction) {\n        const container = this.container;\n        const particle = this.particle;\n        switch (outMode) {\n            case \"bounce\":\n            case \"bounce-vertical\":\n            case \"bounce-horizontal\":\n            case \"bounceVertical\":\n            case \"bounceHorizontal\":\n                this.updateBounce(delta, direction, outMode);\n                break;\n            case \"destroy\":\n                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                    container.particles.remove(particle);\n                }\n                break;\n            case \"out\":\n                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                    this.fixOutOfCanvasPosition(direction);\n                }\n                break;\n            case \"none\":\n                this.bounceNone(direction);\n                break;\n        }\n    }\n    fixOutOfCanvasPosition(direction) {\n        const container = this.container;\n        const particle = this.particle;\n        const wrap = particle.particlesOptions.move.warp;\n        const canvasSize = container.canvas.size;\n        const newPos = {\n            bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n            left: -particle.getRadius() - particle.offset.x,\n            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n            top: -particle.getRadius() - particle.offset.y,\n        };\n        const sizeValue = particle.getRadius();\n        const nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n        if (direction === \"right\" && nextBounds.left > canvasSize.width - particle.offset.x) {\n            particle.position.x = newPos.left;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n        }\n        else if (direction === \"left\" && nextBounds.right < -particle.offset.x) {\n            particle.position.x = newPos.right;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n        }\n        if (direction === \"bottom\" && nextBounds.top > canvasSize.height - particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n            }\n            particle.position.y = newPos.top;\n        }\n        else if (direction === \"top\" && nextBounds.bottom < -particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n            }\n            particle.position.y = newPos.bottom;\n        }\n    }\n    updateBounce(delta, direction, outMode) {\n        const container = this.container;\n        const particle = this.particle;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = Utils_1.Utils.calculateBounds(pos, size), canvasSize = container.canvas.size;\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n    bounceNone(direction) {\n        const particle = this.particle;\n        if (particle.particlesOptions.move.distance) {\n            return;\n        }\n        const gravityOptions = particle.particlesOptions.move.gravity;\n        const container = this.container;\n        if (!gravityOptions.enable) {\n            if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((gravityOptions.acceleration >= 0 &&\n                position.y > container.canvas.size.height &&\n                direction === \"bottom\") ||\n                (gravityOptions.acceleration < 0 && position.y < 0 && direction === \"top\")) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\nexports.Updater = Updater;\n"]},"metadata":{},"sourceType":"script"}